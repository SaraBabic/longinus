<?php
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\rest_api_authentication\MiniorangeApiAuthConstants;
use Drupal\Core\Url;
/**
 * @file
 * Module file for miniOrange REST API Module.
 */


/**
 * Implements hook_help().
 */
function rest_api_authentication_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    case 'help.page.rest_api_authentication':
      $url = Url::fromRoute('user.admin_index')->toString();
      $moduleLink = $url . '/rest_api_authentication/auth_settings';

      $moduleLandingPage = MiniorangeApiAuthConstants::SITE_URL.'/drupal-rest-api-authentication';
      $setup_guides = MiniorangeApiAuthConstants::SITE_URL.'/drupal-api-authentication';

      $output = '';
      $output .= '<b>' . t('ABOUT <a target="_blank" href="' . $moduleLandingPage . '">[Know more]</a>') . '</b>';
      $output .= '<br>' . t('Drupal API Authentication module allows you to authenticate any Drupal site API calls. The module is compatible with both RESTful Web Services and JSON API module. If you have any other custom APIs as well, this module can authenticate them as well.') . '<br>';
      $output .= '<br><b>' . t('AUTHENTICATION METHODS SUPPORTED:') . '</b>';
      $output .= '<br>' . t('<ol> 
                                    <li>Basic Authentication</li>
                                    <li>Key Based Authentication</li>
                                    <li>OAuth/Access Token Based Authentication</li>
                                    <li>JWT Token Based Authentication</li>
                                    <li>3rd Party/External IDP Token Authentication</li>
                                  </ol>') . '</br>';
      $output .= '<p>

                        </p>';
      $output .= '<b>' . t('SETUP GUIDE') . '</b><br>';
      $output .= '' . t('Please click on this <a target="_blank" href="'.$setup_guides.'"><strong>link here</strong></a> to setup the module according to your requirements.') . '';

      $output .= '<br><br><b>' . t('24 / 7 ACTIVE SUPPORT') . '</b><br>';
      $output .= '' . t('If you have any questions or in case you need any sort of assistance in configuring our module according toy our requirements, please feel free to drop us an email at <a href="mailto:drupalsupport@xecurify.com">drupalsupport@xecurify.com</a>. We will be more than happy to help') . '';

      return $output;
  }
}

function rest_api_authentication_form_alter(&$form, FormStateInterface $form_state, $form_id){
  if($form_id === 'rest_api_authentication_config_client'){
    $form['api_auth']['rest_api_authentication_authentication_method_submit']   = [ '#disabled' => TRUE ];
  }

  if($form_id == 'system_modules_uninstall_confirm_form') {
    if (in_array('REST & JSON API Authentication', $form['modules']['#items'])) {
      $site_mail = \Drupal::currentUser()->getEmail();
      $admin_email = $username = \Drupal::config('rest_api_authentication.settings')->get('rest_api_authentication_customer_admin_email');
      $email = empty($admin_email) ? $site_mail : $admin_email;
      $form['#attached']['library'][] = 'rest_api_authentication/rest_api_authentication.basic_style_settings';

      $form['uninstall_field_set'] = array(
        '#type' => 'fieldset',
      );

      $form['uninstall_field_set']['uninstall_form_markup'] = [
        '#markup' => t('<span class="mo_rest_api_highlight_background_note_1">Hey, it seems like you want to uninstall miniOrange REST & JSON API Authentication module. Tell us how could we do better?</span><br>'),
      ];

      $form['uninstall_field_set'] ['uninstall_email'] = [
        '#prefix' => '<br>',
        '#type' => 'email',
        '#title' => t('Email <span style="color: #FF0000">*</span>'),
        '#default_value' => $email,
        '#attributes' => [
          'placeholder' => 'Please enter an email',
        ],
        '#states' => [
          'visible' => [
            ':input[name="skip"]' => ['checked' => false],
          ],
        ],

      ];

      $form['uninstall_field_set'] ['container'] = array(
        '#type' => 'container',
        '#states' => [
          'visible' => [
            ':input[name="skip"]' => ['checked' => false],
          ],
        ]
      );
      $form['uninstall_field_set'] ['container']['uninstall_reason'] = [
        '#type' => 'radios',
        '#title' => t('Reason <span style="color: #FF0000">*</span>'),
        '#options' => [
          'Module is not working' => t('Module is not working'),
          'Basic Authentication Not Working' => t('Basic Authentication Not Working'),
          'API key Authentication Not Working' => t('API key Authentication Not Working'),
          'Does not have the features I\'m looking for' => t('Does not have the features I\'m looking for'),
          'Confusing interface' => t('Confusing interface'),
          'Bugs in the module' => t('Bugs in the module'),
          'Other reasons' => t('Other reasons'),
        ],
        '#attributes' => [
          'name' => 'uninstall_reason',
        ],

      ];

      $form['uninstall_field_set'] ['container']['uninstall_other_reason'] = [
        '#type' => 'textfield',
        '#attributes' => [
          'id' => 'custom-colour',
          'placeholder' => t('Specify your other reason'),
        ],
        '#states' => [
          'visible' => [
            ':input[name="uninstall_reason"]' => ['value' => 'Other reasons'],
          ],
        ],
      ];

      $form['uninstall_field_set'] ['uninstall_skip'] = array(
        '#type' => 'checkbox',
        '#title' => t('Skip the feedback'),
        '#attributes' => [
          'name' => 'skip',
        ],
        '#default_value' => false,
      );

      $form['#validate'][] = 'uninstall_custom_validate_rest_api';
    }
  }
  return $form;
}

function uninstall_custom_validate_rest_api(&$form, FormStateInterface &$form_state) {
  $post         = \Drupal::request()->request->all();
  $skip         = isset($post['skip']) ? 1 : 0 ;
  if(!$skip) {
    $email = $form_state->getValue('uninstall_email');
    $reason = $form_state->getValue('uninstall_reason');

    if(!isset($reason) && empty($email)) {
      $form_state->setErrorByName(
        'uninstall_email',
        t('Email field is required'));
      $form_state->setErrorByName(
        'uninstall_reason',
        t('Reason field is required'));
    }
    else if(!isset($reason)) {
      $form_state->setErrorByName(
        'uninstall_reason',
        t('Reason field is required'));
    }
    else if (empty($email)) {
      $form_state->setErrorByName(
        'uninstall_email',
        t('Email field is required'));
    }
  }
}
